import os
import pandas as pd
from datetime import datetime
import httpx
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)
import logging

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
OWNER_USER_ID = 7205409163
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
MISTRAL_API_KEY = ""
BASE_DIR = r"C:\telerambot"
FEEDBACK_FILE = os.path.join(BASE_DIR, "feedback_results.txt")
EXCEL_FILE = os.path.join(BASE_DIR, "feedback.xlsx")
KNOWLEDGE_BASE_FILE = os.path.join(BASE_DIR, "knowledge_base.json")
ANONYMOUS, RATING, COMMENT = range(3)
THANKS_ANIMATION = "CAACAgIAAxkBAAEPYbloyOtP-eQb6NNFalANFkV_ZG5WJAACVgEAAntOKhDEUbt6AoALpTYE"
MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
AI_CHAT = "ai_chat"
ADMIN_MENU = "admin_menu"
ADMIN_KNOWLEDGE = "admin_knowledge"
ADMIN_FEEDBACK = "admin_feedback"

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def load_knowledge_base():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(KNOWLEDGE_BASE_FILE):
        try:
            with open(KNOWLEDGE_BASE_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"[Knowledge Base Load Error] {e}")
            return {}
    else:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        default_knowledge = {
            "–æ –±–æ—Ç–µ": "–Ø - —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Mistral AI. –ú–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏": "–Ø —É–º–µ—é: –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥, —Å–æ–±–∏—Ä–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π.",
            "–∫–æ–Ω—Ç–∞–∫—Ç—ã": "–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ - @superxset.",
            "–ø–æ–º–æ—â—å": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é. –î–ª—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'."
        }
        save_knowledge_base(default_knowledge)
        return default_knowledge


def save_knowledge_base(knowledge_base):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ —Ñ–∞–π–ª"""
    os.makedirs(BASE_DIR, exist_ok=True)
    try:
        with open(KNOWLEDGE_BASE_FILE, 'w', encoding='utf-8') as f:
            json.dump(knowledge_base, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"[Knowledge Base Save Error] {e}")


def search_knowledge_base(query: str, knowledge_base: dict) -> str:
    """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    query_lower = query.lower()
    relevant_info = []
    
    for key, value in knowledge_base.items():
        if key.lower() in query_lower or any(word in query_lower for word in key.lower().split()):
            relevant_info.append(f"{key}: {value}")
    
    return "\n".join(relevant_info) if relevant_info else ""


async def safe_edit_message(query, text, reply_markup=None):
    try:
        current_text = query.message.text if query.message and query.message.text else ""
        current_markup = query.message.reply_markup if query.message else None
        
        if current_text.strip() == text.strip():
            if reply_markup:
                new_markup_str = str(reply_markup.inline_keyboard)
                old_markup_str = str(current_markup.inline_keyboard) if current_markup else ""
                if old_markup_str == new_markup_str:
                    return await query.answer()
            elif current_markup is None:
                return await query.answer()
        return await query.edit_message_text(text=text, reply_markup=reply_markup)
    except Exception as e:
        print(f"[safe_edit_message] –û—à–∏–±–∫–∞: {e}")
        await query.answer()


async def call_mistral_api(prompt: str, chat_history: list = None, knowledge_context: str = "") -> str:
    headers = {"Authorization": f"Bearer {MISTRAL_API_KEY}", "Content-Type": "application/json"}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    system_message = {
        "role": "system", 
        "content": "–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n" + 
                  (knowledge_context if knowledge_context else "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞.")
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    messages = [system_message]
    if chat_history:
        messages.extend(chat_history)
    messages.append({"role": "user", "content": prompt})
    
    payload = {
        "model": "mistral-small-latest",
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": 512
    }
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(MISTRAL_API_URL, json=payload, headers=headers)
            response.raise_for_status()
            return response.json()["choices"][0]["message"]["content"].strip()
    except Exception as e:
        print(f"[Mistral API Error] {e}")
        return "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, is_owner=False):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    if is_owner:
        keyboard = [
            ["üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"],
            ["üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
            ["üì• –°–∫–∞—á–∞—Ç—å Excel", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]
        ]
    else:
        keyboard = [
            ["üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"],
            ["üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]
        ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø update
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text("üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    elif hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.reply_text("üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        ["üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏—è–º–∏", "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏"],
        ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
        ["üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text("üëë –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)
    elif hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.reply_text("üëë –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)
    
    context.user_data['current_state'] = ADMIN_MENU


async def show_knowledge_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
    keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞–Ω–∏–µ", "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–∑—É"],
        ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏–µ", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞–Ω–∏–µ"],
        ["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π:", reply_markup=reply_markup)
    elif hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.reply_text("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π:", reply_markup=reply_markup)
    
    context.user_data['current_state'] = ADMIN_KNOWLEDGE


async def show_feedback_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏"""
    keyboard = [
        ["üì• –°–∫–∞—á–∞—Ç—å –æ—Ç–∑—ã–≤—ã", "üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤"],
        ["üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–∑—ã–≤—ã"],
        ["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏:", reply_markup=reply_markup)
    elif hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.reply_text("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏:", reply_markup=reply_markup)
    
    context.user_data['current_state'] = ADMIN_FEEDBACK


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–û–ô –ó–ù–ê–ù–ò–ô ===

async def handle_knowledge_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
    text = update.message.text.strip()
    
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞–Ω–∏–µ":
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞–Ω–∏—è:")
        context.user_data['knowledge_action'] = 'add_key'
        return True
    elif text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–∑—É":
        knowledge_base = load_knowledge_base()
        if knowledge_base:
            response = "üìö –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n\n"
            for i, (key, value) in enumerate(knowledge_base.items(), 1):
                response += f"{i}. üîë {key}: {value[:100]}{'...' if len(value) > 100 else ''}\n\n"
        else:
            response = "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞."
        await update.message.reply_text(response)
        return True
    elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏–µ":
        knowledge_base = load_knowledge_base()
        if knowledge_base:
            response = "üìù –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:\n"
            response += "\n".join([f"‚Ä¢ {key}" for key in knowledge_base.keys()])
        else:
            response = "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞."
        await update.message.reply_text(response)
        context.user_data['knowledge_action'] = 'edit_key'
        return True
    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞–Ω–∏–µ":
        knowledge_base = load_knowledge_base()
        if knowledge_base:
            response = "üìù –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:\n"
            response += "\n".join([f"‚Ä¢ {key}" for key in knowledge_base.keys()])
        else:
            response = "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞."
        await update.message.reply_text(response)
        context.user_data['knowledge_action'] = 'delete_key'
        return True
    elif text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É":
        await show_admin_menu(update, context)
        return True
    
    return False


async def handle_knowledge_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"""
    if 'knowledge_action' not in context.user_data:
        return False
    
    action = context.user_data['knowledge_action']
    text = update.message.text.strip()
    
    if action == 'add_key':
        context.user_data['new_key'] = text
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞:")
        context.user_data['knowledge_action'] = 'add_value'
        return True
    elif action == 'add_value':
        key = context.user_data.get('new_key', '')
        if key:
            knowledge_base = load_knowledge_base()
            knowledge_base[key] = text
            save_knowledge_base(knowledge_base)
            await update.message.reply_text(f"‚úÖ –ó–Ω–∞–Ω–∏–µ '{key}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞–Ω–∏—è.")
        del context.user_data['knowledge_action']
        if 'new_key' in context.user_data:
            del context.user_data['new_key']
        await show_knowledge_admin_menu(update, context)
        return True
    elif action == 'edit_key':
        context.user_data['edit_key'] = text
        knowledge_base = load_knowledge_base()
        if text in knowledge_base:
            await update.message.reply_text(f"üìù –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{text}':\n{knowledge_base[text]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            context.user_data['knowledge_action'] = 'edit_value'
        else:
            await update.message.reply_text(f"‚ùå –ó–Ω–∞–Ω–∏–µ —Å –∫–ª—é—á–æ–º '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            del context.user_data['knowledge_action']
            if 'edit_key' in context.user_data:
                del context.user_data['edit_key']
            await show_knowledge_admin_menu(update, context)
        return True
    elif action == 'edit_value':
        key = context.user_data.get('edit_key', '')
        if key:
            knowledge_base = load_knowledge_base()
            knowledge_base[key] = text
            save_knowledge_base(knowledge_base)
            await update.message.reply_text(f"‚úÖ –ó–Ω–∞–Ω–∏–µ '{key}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–Ω–∞–Ω–∏—è.")
        del context.user_data['knowledge_action']
        if 'edit_key' in context.user_data:
            del context.user_data['edit_key']
        await show_knowledge_admin_menu(update, context)
        return True
    elif action == 'delete_key':
        knowledge_base = load_knowledge_base()
        if text in knowledge_base:
            del knowledge_base[text]
            save_knowledge_base(knowledge_base)
            await update.message.reply_text(f"‚úÖ –ó–Ω–∞–Ω–∏–µ '{text}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await update.message.reply_text(f"‚ùå –ó–Ω–∞–Ω–∏–µ —Å –∫–ª—é—á–æ–º '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        del context.user_data['knowledge_action']
        await show_knowledge_admin_menu(update, context)
        return True
    
    return False


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–ó–´–í–ê–ú–ò ===

async def handle_feedback_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ç–∑—ã–≤–∞–º–∏"""
    text = update.message.text.strip()
    
    if text == "üì• –°–∫–∞—á–∞—Ç—å –æ—Ç–∑—ã–≤—ã":
        if not os.path.exists(EXCEL_FILE):
            await update.message.reply_text("üìÅ –§–∞–π–ª –æ—Ç–∑—ã–≤–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")
            return True
        try:
            with open(EXCEL_FILE, "rb") as f:
                await update.message.reply_document(document=f, filename="feedback.xlsx", caption="üìä –í—Å–µ –æ—Ç–∑—ã–≤—ã")
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return True
    elif text == "üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤":
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤
        if os.path.exists(EXCEL_FILE):
            try:
                df = pd.read_excel(EXCEL_FILE)
                total_feedbacks = len(df)
                avg_rating = df['–û—Ü–µ–Ω–∫–∞'].mean() if '–û—Ü–µ–Ω–∫–∞' in df.columns else 0
                anonymous_count = len(df[df['–ê–Ω–æ–Ω–∏–º–Ω—ã–π'] == '–î–∞']) if '–ê–Ω–æ–Ω–∏–º–Ω—ã–π' in df.columns else 0
                
                response = f"üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:\n\n"
                response += f"üìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_feedbacks}\n"
                response += f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}\n"
                response += f"üë§ –ê–Ω–æ–Ω–∏–º–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {anonymous_count}\n"
                response += f"üìù –ü—É–±–ª–∏—á–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {total_feedbacks - anonymous_count}"
                
                await update.message.reply_text(response)
            except Exception as e:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        else:
            await update.message.reply_text("üìÅ –§–∞–π–ª –æ—Ç–∑—ã–≤–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return True
    elif text == "üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        context.user_data['admin_action'] = 'send_notification'
        return True
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–∑—ã–≤—ã":
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=reply_markup
        )
        return True
    elif text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É":
        await show_admin_menu(update, context)
        return True
    
    return False


# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    is_owner = (user_id == OWNER_USER_ID)
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    context.user_data.clear()
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç{'—Å—Ç–≤—É—é, –≤–ª–∞–¥–µ–ª–µ—Ü!' if is_owner else '!'}\n–Ø ‚Äî —É–º–Ω—ã–π –±–æ—Ç –Ω–∞ –±–∞–∑–µ Mistral AI üß†",
        reply_markup=ReplyKeyboardRemove()
    )
    await show_main_menu(update, context, is_owner)


async def start_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é"""
    context.user_data['ai_chat_history'] = []
    context.user_data['current_state'] = AI_CHAT
    
    keyboard = [["üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    await update.message.reply_text(
        "ü§ñ –î–∏–∞–ª–æ–≥ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –Ω–∞—á–∞—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
        "–ù–µ–π—Ä–æ—Å–µ—Ç—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥'.",
        reply_markup=reply_markup
    )


async def end_ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é"""
    if 'ai_chat_history' in context.user_data:
        del context.user_data['ai_chat_history']
    if 'current_state' in context.user_data:
        del context.user_data['current_state']
    
    await update.message.reply_text(
        "‚úÖ –î–∏–∞–ª–æ–≥ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω.",
        reply_markup=ReplyKeyboardRemove()
    )
    user_id = update.effective_user.id
    is_owner = (user_id == OWNER_USER_ID)
    await show_main_menu(update, context, is_owner)


async def handle_ai_chat_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é"""
    if update.message.text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        await end_ai_chat(update, context)
        return
    
    await update.message.chat.send_action(action="typing")
    
    chat_history = context.user_data.get('ai_chat_history', [])
    knowledge_base = load_knowledge_base()
    knowledge_context = search_knowledge_base(update.message.text, knowledge_base)
    
    response = await call_mistral_api(update.message.text, chat_history, knowledge_context)
    
    chat_history.append({"role": "user", "content": update.message.text})
    chat_history.append({"role": "assistant", "content": response})
    context.user_data['ai_chat_history'] = chat_history
    
    await update.message.reply_text(response)
    
    keyboard = [["üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("üëá –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ:", reply_markup=reply_markup)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text.strip()
    current_state = context.user_data.get('current_state')
    user_id = update.effective_user.id
    is_owner = (user_id == OWNER_USER_ID)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if 'knowledge_action' in context.user_data:
        if await handle_knowledge_input(update, context):
            return
    
    if 'admin_action' in context.user_data:
        admin_action = context.user_data['admin_action']
        if admin_action == 'send_notification':
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∑–∞–≥–ª—É—à–∫–∞)
            await update.message.reply_text(
                f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n{text}"
            )
            del context.user_data['admin_action']
            await show_feedback_admin_menu(update, context)
            return
    
    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –¥–∏–∞–ª–æ–≥ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
    if current_state == AI_CHAT:
        await handle_ai_chat_message(update, context)
        return
    
    # –ï—Å–ª–∏ –≤ –∞–¥–º–∏–Ω–∫–µ
    if current_state == ADMIN_MENU and is_owner:
        if text == "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏—è–º–∏":
            await show_knowledge_admin_menu(update, context)
            return
        elif text == "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏":
            await show_feedback_admin_menu(update, context)
            return
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            # –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            stats_text += "üìä –û—Ç–∑—ã–≤—ã: "
            if os.path.exists(EXCEL_FILE):
                try:
                    df = pd.read_excel(EXCEL_FILE)
                    stats_text += f"{len(df)} –∑–∞–ø–∏—Å–µ–π\n"
                except:
                    stats_text += "–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è\n"
            else:
                stats_text += "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            stats_text += "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: "
            knowledge_base = load_knowledge_base()
            stats_text += f"{len(knowledge_base)} –∑–∞–ø–∏—Å–µ–π\n"
            
            await update.message.reply_text(stats_text)
            return
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            return
        elif text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await show_main_menu(update, context, True)
            if 'current_state' in context.user_data:
                del context.user_data['current_state']
            return
    
    # –ï—Å–ª–∏ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞–Ω–∏—è–º–∏
    if current_state == ADMIN_KNOWLEDGE and is_owner:
        if await handle_knowledge_admin_action(update, context):
            return
    
    # –ï—Å–ª–∏ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞–º–∏
    if current_state == ADMIN_FEEDBACK and is_owner:
        if await handle_feedback_admin_action(update, context):
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
        return  # –ü–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç ConversationHandler
    elif text == "üì• –°–∫–∞—á–∞—Ç—å Excel":
        if is_owner:
            return await get_feedback_file(update, context)
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
    elif text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        context.user_data.clear()
        return await start(update, context)
    elif text == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await start_ai_chat(update, context)
        return
    elif text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        await end_ai_chat(update, context)
        return
    elif text == "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π":
        if is_owner:
            # –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await show_knowledge_admin_menu(update, context)
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            knowledge_base = load_knowledge_base()
            if knowledge_base:
                response = "üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n\n"
                for key, value in knowledge_base.items():
                    response += f"üîë {key}:\n{value}\n\n"
            else:
                response = "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞."
            await update.message.reply_text(response)
            await show_main_menu(update, context, False)
        return
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and is_owner:
        # –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        stats_text = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        stats_text += "üìä –û—Ç–∑—ã–≤—ã: "
        if os.path.exists(EXCEL_FILE):
            try:
                df = pd.read_excel(EXCEL_FILE)
                stats_text += f"{len(df)} –∑–∞–ø–∏—Å–µ–π\n"
            except:
                stats_text += "–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è\n"
        else:
            stats_text += "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        stats_text += "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: "
        knowledge_base = load_knowledge_base()
        stats_text += f"{len(knowledge_base)} –∑–∞–ø–∏—Å–µ–π\n"
        
        await update.message.reply_text(stats_text)
        return
    elif text == "üëë –ê–¥–º–∏–Ω–∫–∞" and is_owner:
        await show_admin_menu(update, context)
        return
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    await update.message.reply_text(
        "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardRemove()
    )
    await show_main_menu(update, context, is_owner)


# === –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ ===

async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data="anon_yes"),
         InlineKeyboardButton("üë§ –û–±—ã—á–Ω—ã–π", callback_data="anon_no")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üì® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–∑—ã–≤–∞:", reply_markup=reply_markup)
    return ANONYMOUS


async def handle_anonymous_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await safe_edit_message(query, "‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        user_id = query.from_user.id
        is_owner = (user_id == OWNER_USER_ID)
        await show_main_menu(query, context, is_owner)
        return ConversationHandler.END

    context.user_data['user_wants_anon_label'] = (query.data == "anon_yes")
    keyboard = [
        [InlineKeyboardButton("‚≠êÔ∏è 1", callback_data="1"), InlineKeyboardButton("‚≠êÔ∏è 2", callback_data="2"), InlineKeyboardButton("‚≠êÔ∏è 3", callback_data="3")],
        [InlineKeyboardButton("‚≠êÔ∏è 4", callback_data="4"), InlineKeyboardButton("‚≠êÔ∏è 5", callback_data="5")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await safe_edit_message(query, "üåü –û—Ü–µ–Ω–∏—Ç–µ –±–æ—Ç–∞ –æ—Ç 1 –¥–æ 5:", reply_markup=reply_markup)
    return RATING


async def handle_rating_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await safe_edit_message(query, "‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        user_id = query.from_user.id
        is_owner = (user_id == OWNER_USER_ID)
        await show_main_menu(query, context, is_owner)
        return ConversationHandler.END

    context.user_data['rating'] = query.data
    await safe_edit_message(query, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ (–º–æ–∂–Ω–æ –∫—Ä–∞—Ç–∫–æ):")
    return COMMENT


async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['comment'] = update.message.text
    user = update.message.from_user
    username = f"@{user.username}" if user.username else f"ID: {user.id}"
    is_anon = context.user_data.get('user_wants_anon_label', False)

    report = (
        f"üì© –û–¢–ó–´–í\n–û—Ç: {username}\n–û—Ü–µ–Ω–∫–∞: {context.user_data['rating']} ‚≠êÔ∏è\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {context.user_data['comment']}\n–ê–Ω–æ–Ω–∏–º–Ω—ã–π: {'–î–∞' if is_anon else '–ù–µ—Ç'}\n---\n"
    )

    os.makedirs(BASE_DIR, exist_ok=True)
    with open(FEEDBACK_FILE, "a", encoding="utf-8") as f:
        f.write(report)

    await save_feedback_to_excel(
        EXCEL_FILE,
        datetime.now(),
        username,
        context.user_data['rating'],
        context.user_data['comment'],
        is_anon
    )

    try:
        await context.bot.send_message(chat_id=OWNER_USER_ID, text=report)
    except Exception as e:
        print(f"[Send to owner error] {e}")

    await update.message.reply_sticker(sticker=THANKS_ANIMATION)
    await update.message.reply_text("üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=ReplyKeyboardRemove())
    user_id = update.effective_user.id
    is_owner = (user_id == OWNER_USER_ID)
    await show_main_menu(update, context, is_owner)
    context.user_data.clear()
    return ConversationHandler.END


async def save_feedback_to_excel(file_path, timestamp, user_id, rating, comment, is_anon):
    new_row = {
        "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è": timestamp.strftime("%Y-%m-%d %H:%M:%S"),
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": user_id,
        "–û—Ü–µ–Ω–∫–∞": int(rating),
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment,
        "–ê–Ω–æ–Ω–∏–º–Ω—ã–π": "–î–∞" if is_anon else "–ù–µ—Ç"
    }
    df_new = pd.DataFrame([new_row])
    try:
        df = pd.read_excel(file_path) if os.path.exists(file_path) else pd.DataFrame()
        df = pd.concat([df, df_new], ignore_index=True)
        df.to_excel(file_path, index=False, engine='openpyxl')
        print(f"[Excel] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í—Å–µ–≥–æ: {len(df)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"[Excel Error] {e}")
        with open(file_path.replace(".xlsx", "_backup.txt"), "a", encoding="utf-8") as f:
            f.write(f"[{timestamp}] {user_id} | {rating} | {comment} | –ê–Ω–æ–Ω–∏–º–Ω—ã–π: {is_anon}\n")


# === –ê–î–ú–ò–ù-–§–£–ù–ö–¶–ò–ò ===

async def get_feedback_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != OWNER_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    if not os.path.exists(EXCEL_FILE):
        await update.message.reply_text("üìÅ –§–∞–π–ª –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return
    try:
        with open(EXCEL_FILE, "rb") as f:
            await update.message.reply_document(document=f, filename="feedback.xlsx", caption="üìä –û—Ç–∑—ã–≤—ã")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–¥–ª—è inline –∫–Ω–æ–ø–æ–∫)"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_clear":
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
        try:
            if os.path.exists(EXCEL_FILE):
                os.remove(EXCEL_FILE)
            if os.path.exists(FEEDBACK_FILE):
                os.remove(FEEDBACK_FILE)
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                with open(FEEDBACK_FILE, "w", encoding="utf-8") as f:
                    f.write("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n\n")
            await query.edit_message_text("‚úÖ –í—Å–µ –æ—Ç–∑—ã–≤—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
    elif query.data == "cancel_clear":
        await query.edit_message_text("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    user_id = query.from_user.id
    is_owner = (user_id == OWNER_USER_ID)
    await show_feedback_admin_menu(query, context)


# === –ó–ê–ü–£–°–ö ===

def main():
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
    logging.getLogger("httpx").setLevel(logging.WARNING)

    os.makedirs(BASE_DIR, exist_ok=True)
    if not os.path.exists(FEEDBACK_FILE):
        with open(FEEDBACK_FILE, "w", encoding="utf-8") as f:
            f.write("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n\n")

    app = Application.builder().token(TOKEN).build()

    # ‚úÖ ConversationHandler –¥–ª—è –∞–Ω–∫–µ—Ç—ã
    feedback_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å$"), feedback_start)],
        states={
            ANONYMOUS: [CallbackQueryHandler(handle_anonymous_choice)],
            RATING: [CallbackQueryHandler(handle_rating_choice)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment)],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
        per_message=False,
        allow_reentry=True
    )
    app.add_handler(feedback_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback query
    app.add_handler(CallbackQueryHandler(handle_callback_query))

    # –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("getfeedback", get_feedback_file))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç.")
    app.run_polling()


if __name__ == "__main__":
    main()